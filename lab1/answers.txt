1, exploit-2a.py:
we exploit the vulnerability of function
         url_decode(reqpath, sp1);
which is in [http.c:105], for it doesn't perform bounds checking. we let the path  after "GET" method be
"/A(repeat 3000 times)", thus the path(whose length is 3001) will be copied into reqpath, while reqpath
is defined as:  
         char reqpath[2048];
in [zookd.c:65], the stack address after reqpath is saved EBP and return address of funciton process_client(),
obviously, these two addresses will be overwritten by "AAAA" and zookd crashes, this can be verified by either
"dmesg | tail" or just observe zook's behaviors.

2, exploit-2b.py:
we exploit the vulnerablility of function
         strcat(pn, name);
which is in [http.c:282], for it doesn't perform bounds checking, since the address after "pn" is the address
of function pointer "handler", thus if name is too long, "handler will be overwitten. we just set the path of
"GET" method to be "/A(repeat 1023 times)", then "/A(repeat 1023 times)" will be concatenated after pn, at 
this time "pn" already contain the root path, thus pn[1024] will definitely be overflowed and thus "handler" get
overwritten.
unfortunately, zookfs fork a new process to tackle each request, thus this attack will not affect the behavior of
zookfs, we just stop ourselves from getting the resources......
However, if we modify "handler" carefully, we can let it point to anywhere thus execute code we want!!!

3, exploit-3a.py
this attack corresponds to exploit-2a.py
the basic idea is to please shellcode(with some nop "\x90" operations) in buffer "reqpath" and let process_client()
return to "reqpath".

4, exploit-3b.py
this attack corresponds to expoit-2b.py
the basic idea is similar to above one

5, exploit-4a.py
this attack is the return-to-libc implementation of exploit-2a.py
the return address of process_client() is modified to point to unlink(),then follows address of function exit(),
then address of string "/home/httpd/grades.txt", then follows string "/home/httpd/grades.txt". it is arranged 
according to the C function call rule.

